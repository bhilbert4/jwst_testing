#!/usr/bin/env python

import pytest
import stvalidate
import os
import argparse
import ConfigParser
from subprocess import call
from shutil import copyfile, rmtree

def main(args):
    config_abs_path = os.path.abspath(args.config_file)
    if not os.path.isfile(config_abs_path):
        raise ValueError(args.config_file+' is not a path to a config file')
    starting_dir = os.getcwd()
    #run from the module root directory for prettier output
    os.chdir(os.path.dirname(stvalidate.__file__))
    pytest_args = ['-v', '--config_file='+config_abs_path]
    config = ConfigParser.ConfigParser()
    config.read(config_abs_path)

    if config.has_option("options","tests"):
        pytest_args.append('-k '+config.get("options","tests"))
    if config.has_option("options","gen_report"):
        if config.get("options","gen_report") == "True":
            pytest_args.append('--gen_report')

    pytest_args.append('test_pipeline.py')
    pytest.main(pytest_args)

    os.chdir(starting_dir)

    # generate reports with sphinx
    if config.has_option("options", "gen_report"):
        if config.get("options", "gen_report") == "True":
            print("generating report")
            if not os.path.exists(os.path.join(os.path.dirname(config_abs_path),'source')):
                os.makedirs(os.path.join(os.path.dirname(config_abs_path),'source'))
            
            copyfile(os.path.join(os.path.dirname(stvalidate.__file__), "conf.py"), 
                os.path.join(os.path.dirname(config_abs_path),'source/conf.py'))

            call(["sphinx-build", "-b", "latex", os.path.join(os.path.dirname(config_abs_path),"source"), 
                os.path.join(os.path.dirname(config_abs_path),"build")])
            os.chdir(os.path.join(os.path.dirname(config_abs_path),"build"))
            call(["pdflatex", "JWSTCalibrationPipelineValidationTestingReport.tex"])
            call(["pdflatex", "JWSTCalibrationPipelineValidationTestingReport.tex"])
            os.chdir("..")
            if config.has_option("options", "report_filename"):
                copyfile("build/JWSTCalibrationPipelineValidationTestingReport.pdf", 
                    config.get("options", "report_filename"))
            else:
                copyfile("build/JWSTCalibrationPipelineValidationTestingReport.pdf", 
                    "report.pdf")

            # clean up
            rmtree(os.path.join('build/'))
            rmtree(os.path.join('source/'))

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Test the JWST calibration pipeline')
    parser.add_argument('config_file')
    args = parser.parse_args()
    main(args)